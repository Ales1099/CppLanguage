#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct list
{
	int data;
	int index;
	struct list * next;
	struct list * prev;
};

struct list * push_back(struct list * pointer,  int value);
struct list * delete_index(struct list * poinetr, int _index);
struct list * pop_back(struct list * pointer);
int stringCat(char * one, char * two);
void strcopy(char * toHere, char * fromHere);
void printList(struct list * pointer);
int yes(struct list * pointer, int value);
void deleteList(struct list * pointer);

int main(int argc, char ** argv)
{
	struct list * toFile = NULL;
	struct list * fromFile = NULL;
	FILE * file = fopen((const char*)argv[1],"r+");
	int inter = 0;
	toFile = push_back(toFile,-100);
	while(1)
	{
		int i;
		int err = fscanf(file,"%d",&i);
		if(err == EOF)
			break;
		int errorn = yes(toFile,i);
		//printf("YES!!!\n");
		//err = yes(toFile,i);
		//printf("YES!!!\n");
		if(err==1)
			fromFile = push_back(fromFile,i);
		toFile = push_back(toFile,i);
		err = yes(toFile,i);
		if(err==1)
			printf("1\n");
		
	}
	printList(toFile);
//	deleteList(fromFile);
	printList(fromFile);
	fclose(file);
	return(0);
}

//An element will push in the back from list

struct list * push_back(struct list * pointer, int value)
{
	if(pointer == NULL)
	{
		pointer = (struct list*)malloc(sizeof(struct list));
		pointer->data = value;
		pointer->index = 0;
		pointer->next = NULL;
		pointer->prev = NULL;
		return(pointer);
	}

	if(pointer->next == NULL)
	{
		struct list * buffer = (struct list*)malloc(sizeof(struct list));
		buffer->data = value;
		buffer->index = 1;
		pointer->next = buffer;
		pointer->prev = buffer;
		buffer->next = pointer;
		buffer->prev = pointer;
		return(pointer);
	}

	struct list * cur = pointer->prev;
	struct list * buffer = (struct list*)malloc(sizeof(struct list));
	buffer->data = value;
	buffer->index = cur->index+1;
	cur->next = buffer;
	pointer->prev = buffer;
	buffer->prev = cur;
	buffer->next = pointer;
	return(pointer);
}

//An element will delete on index from list

struct list * delete_index(struct list * pointer, int _index)
{
	if(pointer == NULL)
	{
		printf("List is Empty!!!\n");
		return(NULL);
	}

	struct list * buffer = pointer;
	struct list * pnext = (struct list*)malloc(sizeof(struct list));
	struct list * pprev = (struct list*)malloc(sizeof(struct list));

	while(buffer->index != _index) buffer=buffer->next;

	pnext = buffer->next;
	pprev = buffer->prev;

	pprev->next = pnext;
	pnext->prev = pprev;

	buffer->next = buffer->prev = NULL;
	free(buffer);
	return(pointer);
}

int stringCat(char * one, char * two)
{
	int par = 0;
	int LengthOne = strlen(one);
	int LengthTwo = strlen(two);

	if(LengthOne == LengthTwo)
	{
		for(int i=0; i<LengthOne; ++i)
		{
			if(*(one+i) == *(two+i))
				par = 1;
			else
			{
				par = 0;
				return(par);
			}
		}
	}
	else
		par = 0;

	return(par);
}

//The list print

void printList(struct list * pointer)
{
	if(pointer == NULL)
	{
		printf("List is Empty!!!\n");
		return;
	}

	struct list * buffer = pointer;
	do{
		printf("%d :: %d\n",buffer->data, buffer->index);
		buffer=buffer->next;
	} while(buffer != pointer);
	return;
}

void strcopy(char * toHere, char * fromHere)
{
	int length = strlen(fromHere);
	toHere = (char*)malloc(sizeof(char)*length);
	for(int i=0; i<length; ++i)
		toHere[i] = fromHere[i];
}

struct list * pop_back(struct list * pointer)
{
	if(pointer == NULL)
	{
		printf("List is empty!!!\n");
		return NULL;
	}

	struct list * cur = pointer->prev;
	struct list * buf = cur->prev;

	pointer->prev = buf;
	buf->next = pointer;

	cur->next = NULL;
	cur->prev = NULL;

	free(cur);
	return(pointer);
}

void deleteList(struct list * pointer)
{
	if(pointer == NULL)
	{
		printf("List is Empty\n");
		return;
	}

	while(pointer != NULL)
		pointer = pop_back(pointer);

	printf("OK!!!\n");
	return;
}

int yes(struct list * pointer, int value)
{
	if(pointer == NULL)
	{
	//	printf("List is empty!!!\n");
		return(0);
	}

	struct list * buffer = pointer;
	do{
		if(buffer->data == value)
		{
			return(1);
		}
		buffer = buffer->next;
	} while(buffer != pointer);
	return(0);
}
